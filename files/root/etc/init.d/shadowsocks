#!/bin/sh /etc/rc.common
#
# Copyright (C) 2016 Jian Chang <aa65535@live.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

START=90
STOP=15

NAME=shadowsocks
EXTRA_COMMANDS=rules
CONFIG_FILE=/var/etc/$NAME.json

uci_get_by_name() {
	local ret=$(uci get $NAME.$1.$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_get_by_type() {
	local ret=$(uci get $NAME.@$1[0].$2 2>/dev/null)
	echo ${ret:=$3}
}

get_arg_ota() {
	case "$(uci_get_by_name $1 auth)" in
		1|on|true|yes|enabled) echo "-A";;
	esac
}

gen_config_file() {
	cat <<-EOF >$CONFIG_FILE
		{
		    "server": "$(uci_get_by_name $1 server)",
		    "server_port": $(uci_get_by_name $1 server_port),
		    "local_address": "0.0.0.0",
		    "local_port": $(uci_get_by_name $1 local_port),
		    "password": "$(uci_get_by_name $1 password)",
		    "timeout": $(uci_get_by_name $1 timeout 60),
		    "method": "$(uci_get_by_name $1 encrypt_method)"
		}
EOF
}

gen_lan_hosts() {
	case "$(uci_get_by_name $1 enable)" in
		1|on|true|yes|enabled)
			echo "$(uci_get_by_name $1 type),$(uci_get_by_name $1 host)";;
	esac
}

start_rules() {
	local arg_udp
	local main_server=$(uci_get_by_type transparent_proxy main_server)
	local udp_relay_server=$(uci_get_by_type transparent_proxy udp_relay_server)
	local server=$(uci_get_by_name $main_server server)
	local local_port=$(uci_get_by_name $main_server local_port)
	[ "$udp_relay_server" = "same" ] && udp_relay_server=$main_server
	if [ "$udp_relay_server" = "$main_server" ]; then
		arg_udp="-u"
	elif [ -n "$udp_relay_server" ]; then
		arg_udp="-U"
		local udp_server=$(uci_get_by_name $udp_relay_server server)
		local udp_local_port=$(uci_get_by_name $udp_relay_server local_port)
	fi
	config_load $NAME
	/usr/bin/ss-rules \
		-s "$server" \
		-l "$local_port" \
		-S "$udp_server" \
		-L "$udp_local_port" \
		-i "$(uci_get_by_type access_control wan_bp_list)" \
		-b "$(uci_get_by_type access_control wan_bp_ips)" \
		-w "$(uci_get_by_type access_control wan_fw_ips)" \
		-I "$(uci_get_by_type access_control lan_ifaces)" \
		-d "$(uci_get_by_type access_control lan_target)" \
		-a "$(echo $(config_foreach gen_lan_hosts lan_hosts))" \
		-e "$(uci_get_by_type access_control ipt_ext)" \
		-o $arg_udp
		local ret=$?
		[ "$ret" = 0 ] || /usr/bin/ss-rules -f
	return $ret
}

rules() {
	if [ -z "$(pidof ss-redir 2>/dev/null)" ]; then
		logger -st $NAME -p3 "ss-redir not running."
		return 1
	fi
	start_rules
}

start_redir() {
	gen_config_file $1
	ss-redir -c $CONFIG_FILE $2 $(get_arg_ota $1) -f /var/run/ss-redir$3.pid
}

redir() {
	if !(command -v ss-redir >/dev/null 2>&1); then
		logger -st $NAME -p3 "ss-redir not found."
		return 1
	fi
	mkdir -p /var/run /var/etc
	local main_server=$(uci_get_by_type transparent_proxy main_server)
	[ "$main_server" = "nil" ] && return 1
	local udp_relay_server=$(uci_get_by_type transparent_proxy udp_relay_server)
	[ "$udp_relay_server" = "same" ] && udp_relay_server=$main_server
	if [ "$udp_relay_server" = "$main_server" ]; then
		start_redir $main_server -u
	elif [ -n "$udp_relay_server" ]; then
		start_redir $main_server
		start_redir $udp_relay_server -U -udp
	else
		start_redir $main_server
	fi
}

start_tunnel() {
	gen_config_file $1
	ss-tunnel -c $CONFIG_FILE -u $(get_arg_ota $1) \
		-l $(uci_get_by_type port_forward local_port 5300) \
		-L $(uci_get_by_type port_forward destination 8.8.4.4:53) \
		-f /var/run/ss-tunnel.pid
}

tunnel() {
	if !(command -v ss-tunnel >/dev/null 2>&1); then
		logger -st $NAME -p3 "ss-tunnel not found."
		return 0
	fi
	local server=$(uci_get_by_type port_forward server)
	[ -z "$server" ] || start_tunnel $server
}

start() {
	redir && rules
	tunnel
}

kill_pid() {
	local pid=$(cat $1 2>/dev/null)
	rm -f $1
	if [ -n "$pid" -a -d "/proc/$pid" ]; then
		kill -9 $pid
	fi
}

stop() {
	/usr/bin/ss-rules -f
	kill_pid /var/run/ss-redir.pid
	kill_pid /var/run/ss-redir-udp.pid
	kill_pid /var/run/ss-tunnel.pid
}
